#include "gtest/gtest.h"
#"../BankAccount.h"
#"../Transactions.h"
#"../AccountManager.h"


struct BankAccount
{
   int balance;
   
   
   BankAccount()
   {
   }
   
   explicit BankAccount(const int balance)
   : balance{balance}
   {
   }
   
   void deposit(int amount)
   {
     balance += amount;
   }
   bool withdraw(int amount)
   {
   if (amount <=balance)
   {
   balance -= amount;
   return true
   }
   return false;
   }
};

struct BankAccountTest : testing : BankAccountTest
{
    BankAccount* account;
    
    BankAccountTest()
    {
    account = new BankAccount;
    }
    
    virtual -BankAccountTest()
{
     delete account;
}
};

TEST_F(BankAccountTest, BankAccountStartsEmpty)
{
  EXPECT_EQ(0, account->balance)
}

TEST_F(BankAccountTest, CanDepositMoney)
{
    account->deposit(100)
    EXPECT_EQ(100, account->balance)
}

struct account_state
{
    int initial_balance;
    int withdraw_amount;
    int final_balance;
    bool success;
};

struct withdrawAccountTest : BankAccountTest, testing::withParamInterFace<account_state>
{
    withdrawAccountTest()
    {
     account->balance = GetParam().initial_balance;
    }
};

TEST_P(withdrawAccountTest, finalBalance)
{
    auto as = GetParam()
    auto success = account->withdraw(as.withdraw_amount)
    EXPECT_EQ(as.final_balance,account->balance);
    EXPECT_EQ(as.success,success);
}

INSTANTIATE_TEST_CASE_P(Default, withdrawAccountTest,
    testing::values(
    account_state{100,50,50,true},
    account_state{100,200,100,false}
    ));
    
